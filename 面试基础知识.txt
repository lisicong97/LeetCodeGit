Go AWS SaaS Redis Nginx MongoDB Kafka container

进程
	新状态：进程已经创建，但未被OS接纳为可执行进程。
	就绪态：进程做好了准备，准备执行。
	执行状态：该进程正在执行。
	阻塞状态：等待某事件发生才能执行，如等待I/O完成。
	终止状态：结束执行。

	与线程区别
	进程是操作系统资源分配的基本单位；而线程是任务调度和执行的基本单位
	每个进程都有独立的代码和内存空间；同一类线程共享代码和数据空间，除了CPU外，系统不会为线程分配内存
	父和子进程使用进程间通信机制；同一进程的线程通过读取和写入数据到进程变量来通信

	进程间通信
	1.管道 pipe 2.信号 signal 3.消息队列 message queue
	4.共享内存 shared memory 5.信号量 semaphore 6.套接字 socket
	线程间通信
	信号量：wait/notify

死锁四条件 互斥、占有并等待、非抢占、循环等待
公平锁 每次拿队列的第一个 非公平锁
syncronized偏向锁 - 轻量级锁 -重量级锁
乐观锁（CAS、版本比较） 悲观锁
读写锁 读锁可共享 写锁可降级


内存分配
	连续分区：
		首次适应算法、最佳适应算法、最坏适应算法
		动态产生外部碎片、静态产生内部碎片
	分页储存管理：
		一个进程一张页表
		页号是隐含的，块号的多少决定与一页的大小和系统总内存
		快表（TLB）二级页表
		不会产生外部碎片
	分段储存管理：
		段表里有段长和基址
		分段对用户是可见的，用户编程时需要显式地给出段名
		段比分页更容易实现信息的共享和保护
	先分段再分页

虚拟内存
	最佳置换法（往后找）、FIFO、LRU

C编译：预处理 替换include；编译 生成汇编文件；汇编 生成字节码；链接 将目标文件和库文件(.so等)链接成最终的可执行文件





TCP：
三次握手
	-> SYN=1，ACK=0，seq=x
	<- SYN=1，ACK=1，seq=y，ack=x+1
	-> ACK=1，seq=x+1，ack=y+1
	两次握手导致client第一次没回复再发一次，但是第一次的回复来了，client以为是第二次的回复，发送无必要内容
四次挥手
	-> FIN=1，seq=u
	<- ACK=1，seq=v，ack=u+1
	<- FIN=1，ACK=1，seq=w，ack=u+1
	-> ACK=1，seq=u+1，ack=w+1
	最后A要确认B收到，所以有等待时间
RTT RTO超时重传
使用滑动窗口进行流量控制
slow start进行拥塞控制

IP包
	版本号4位
	头长4位
	段偏移量13位，与很多其它段位组合，帮助接收方组合分段的报文
	生存时间8位 TTL（Time To Live）
    协议代码8位 
    头检验和16位，是IPv4数据包头部的校验和。（确保bits传输没出错
    源始地址，32位
    目的地址，32位
TCP包
	源始port 目的port 16位
	seq ack
	偏移4位，类似IP，表明数据距包头有多少个32位
	紧急比特URG 确认比特ACK SYN FIN
	复位比特RST(Reset) 表明TCP连接中出现严重差错 必须释放连接
	窗体字段16位
	包校验和16位
UDP
	无连接，没有拥塞控制，支持一对多，有校验和

HTTP/1.1 持久连接
HTTP/2 多路复用
HTTPS 对称密钥 SSL/TLS






ACID：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）

第一范式：数据库中的每一列都是不可分割的基本数据项，实体中的某个属性不能有多个值
第二范式：表中要有一列属性可以将实体完全区分（主键）
第三范式：要求一个数据库表中不包含已在其他表中已包含的非主关键字信息
BC范式：
	所有的非主属性对每一个码都是完全函数依赖
	所有的主属性对每一个不包含它的码也是完全函数依赖
	没有任何属性完全函数依赖于非码的任何一组属性

丢失修改 脏读 不可重复读 幻读（群体 插入）
未提交读 提交读 可重复读 可串行化






程序计数器 每个线程都有
虚拟机栈 局部变量表（基本数据类型 引用 returnAddress）
本地方法栈 native方法服务
Java堆 存放对象 （线程共享 
方法区  类信息、常量、静态变量、常量池（线程共享

引用计数法 无法解决互相循环引用
可达性分析 GC roots对象们到不了
强引用 软引用 弱引用 虚引用

标记清除法（mark-sweep）
复制算法 常用的新生代回收（1Eden+2survive）
标记整理法 （compact移动）
 分代收集法 新生代（2）、老年代（1 3）

serial 原始 适合client
parNew 能和CMS合作
Parallel Scavenge 吞吐量
CMS 并发收集 低停顿
G1 标记清理+复制 可预测停顿

Eden满了 minor GC
老年代 Full GC（伴有Minor GC
	大对象、熬过minor GC对象进入老年代
	